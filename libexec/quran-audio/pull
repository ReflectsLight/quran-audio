#!/usr/bin/env ruby
require "net/http"
require "json"
require "fileutils"
require "optparse"
require "io/line"
require "ryo"

##
# CLI options
options = Ryo(author: "alafasy", bitrate: "128", surah: (1..114).to_a)
begin
  op = nil
  OptionParser.new do |o|
    op = o
    o.banner = "Usage: quran-audio pull [OPTIONS]"
    o.on("-aNAME", "--author NAME", "An author's name (default: alafasy)")
    o.on("-bBITRATE", "--bitrate BITRATE", "An MP3 bitrate (default: 128)")
    o.on("-sSURAH", "--surah SURAH", "A comma-separated list of surahs (default: all surahs)", Array)
    o.on("-h", "--help", "Show help") do
      puts op.help
      exit(0)
    end
  end.parse(ARGV, into: options)
rescue
  puts op.help
  exit(1)
end

##
# HTTP
hostname = "everyayah.com"
http = Net::HTTP.new(hostname, 443).tap { _1.use_ssl = true }

##
# Paths
root_dir  = File.realpath(File.join(__dir__, "..", ".."))
share_dir = File.join(root_dir, "share", "quran-audio")

##
# Utils
def pull(http, author, file, bitrate, interrupt: false, &b)
  res = http.get File.join(format(author.http.path, bitrate:), file)
  case res
  when Net::HTTPOK
    yield(res.body)
    exit if interrupt
    sleep 0.5
  else
    puts "error #{res.body}"
  end
rescue Interrupt
  line.end.rewind.print("Please wait for a graceful exit").end
  pull(http, author, file, bitrate, interrupt: true, &b)
end

def filename(surah_no, ayah_no)
  surah_no = surah_no.rjust(3, "0")
  ayah_no = ayah_no.to_s.rjust(3, "0")
  "#{surah_no}#{ayah_no}.mp3"
end

def line
  @line ||= IO::Line.new($stdout)
end

##
# main
authors    = Ryo.from JSON.parse(File.binread(File.join(share_dir, "authors.json")))
author     = authors[options.author]
dest_dir   = format(author.dest.dir, share_dir:)
surah_size = JSON.parse(File.binread(File.join(share_dir, "surahsize.json")))
FileUtils.mkdir_p(dest_dir)

options.surah.each do |surah_no|
  surah_no = surah_no.to_s
  FileUtils.mkdir_p(File.join(dest_dir, surah_no))
  1.upto(surah_size[surah_no]) do |ayah_no|
    pull(http, author, filename(surah_no, ayah_no), options.bitrate) do |body|
      File.binwrite(
        File.join(dest_dir, surah_no, "#{ayah_no}.mp3"),
        body
      )
    end
    percent = sprintf("%.2f", (ayah_no.to_i / surah_size[surah_no].to_f) * 100)
    line.rewind.print "Surah #{surah_no} [#{percent}%]"
  end
  line.end
end
