#!/usr/bin/env ruby
lib_dir = File.realpath File.join(__dir__, "..", "..", "lib", "quran-audio")
require "optparse"
require File.join(lib_dir, "pull")

##
# CLI options
options = Ryo(author: "alafasy", bitrate: nil, surah: (1..114).to_a, cooldown: 0.5)
begin
  op = nil
  OptionParser.new(nil, 26, " " * 2) do |o|
    op = o
    o.banner = "Usage: quran-audio pull [OPTIONS]"
    o.on("-aNAME", "--author NAME", "An author's name (default: alafasy)")
    o.on("-bBITRATE", "--bitrate BITRATE", "An MP3 bitrate (default: highest available)")
    o.on("-sSURAH", "--surah SURAH", "A comma-separated list of surahs (default: all surahs)", Array)
    o.on("-cNUMBER", "--cooldown NUMBER", "A number of second(s) to wait between requests (default: 0.5)", Float)
    o.on("-l", "--authors", "Show the available authors")
    o.on("-h", "--help", "Show help") do
      puts op.help
      exit(0)
    end
  end.parse(ARGV, into: options)
rescue
  puts op.help
  exit(1)
end

##
# main
def main(options)
  cmd = Pull.new(options)
  if cmd.options.authors
    puts
    puts Pull::Authors.new(cmd)
    puts
    return
  end

  skipped = false
  options.surah.each do |surah_no|
    1.upto(cmd.count[surah_no]) do |ayah_no|
      if cmd.exist?(surah_no, ayah_no)
        skipped = true
        next
      end
      cmd.pull(surah_no.to_s, ayah_no.to_s)
      percent = sprintf("%.2f", (ayah_no / cmd.count[surah_no].to_f) * 100)
      cmd.line.rewind.print "Surah #{surah_no} [#{percent}%]"
      skipped = false
    end
    cmd.line.end unless skipped
  end
end
main(options)
